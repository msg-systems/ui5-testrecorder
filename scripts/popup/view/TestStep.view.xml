<mvc:View xmlns="sap.m" xmlns:mvc="sap.ui.core.mvc" xmlns:f="sap.ui.layout.form" xmlns:code="sap.ui.codeeditor" xmlns:semantic="sap.m.semantic" xmlns:core="sap.ui.core" controllerName="com.ui5.testing.controller.TestStep">
    <semantic:FullscreenPage navButtonPress="onNavBack" showSubHeader="false" title="{viewModel>/element/item/identifier/ui5Id}" showNavButton="true" busy="{viewModel>/busy}" showFooter="{= ${viewModel>/quickMode} === true || ${viewModel>/quickMode} === false}">
        <semantic:customHeaderContent>
            <MenuButton text="Navigate from Item" buttonMode="Regular">
                <menu>
                    <Menu itemSelected="onMenuAction">
                        <items>
                            <MenuItem text="Parent" items="{viewModel>/element/item/parents}" enabled="{= ${viewModel>/element/item/parents}.length > 0 }">
                                <items>
                                    <MenuItem text="{viewModel>identifier/ui5Id}" press="onSelectItem"/>
                                </items>
                            </MenuItem>

                            <MenuItem text="Aggregations" items="{ path: 'viewModel>/element/item/aggregation', filters: [{ path: 'length', operator: 'NE', value1: 0 }] }">
                                <items>
                                    <MenuItem text="{viewModel>name}" items="{viewModel>rows}">
                                        <items>
                                            <MenuItem text="{viewModel>ui5Id}" press="onSelectItem"/>
                                        </items>
                                    </MenuItem>
                                </items>
                            </MenuItem>
                        </items>
                    </Menu>
                </menu>
            </MenuButton>
        </semantic:customHeaderContent>

        <semantic:customFooterContent>
            <Button visible="{= ${viewModel>/quickMode} === true }" type="Reject" text="Cancel" press="onStopFromQuick"/>
            <Button visible="{= ${viewModel>/quickMode} === true }" type="Accept" text="Re-Select" press="onNewStepFromQuick"/>
            <Button visible="{= ${viewModel>/quickMode} === false }" type="Reject" text="Cancel" press="onCancelStep"/>
            <Button visible="{= ${viewModel>/quickMode} === false }" id="btSaveFooter" type="Accept" text="Save Step" press="onSave"/>
        </semantic:customFooterContent>

        <semantic:content>
            <MessageStrip id="displayStrip" text="This is recorded information about a test step. Changes are limited and wrong information about found items may be displayed the information is retrieved in real time from the connected page." type="Warning" showIcon="true" visible="{viewModel>/blocked}"/>
            <MessageStrip id="offlineStrip" text="The information about this test step is not complete as no items can be retrieved from the page right now. This is only possible while recording." type="Warning" showIcon="true" visible="{= !${viewModel>/isInjected} &amp;&amp; !${viewModel>/blocked} }"/>
            <Panel expandable="false" expanded="true" width="auto">
                <headerToolbar>
                    <Toolbar active="true" height="3rem" style="Clear" visible="{= ${viewModel>/quickMode} === true || ${viewModel>/quickMode} === false}">
                        <ToolbarSpacer/>
                        <Button visible="{= ${viewModel>/quickMode} === true }" type="Reject" text="Cancel" press="onStopFromQuick"/>
                        <Button visible="{= ${viewModel>/quickMode} === true }" type="Accept" text="Re-Select" press="onNewStepFromQuick"/>
                        <Button visible="{= ${viewModel>/quickMode} === false }" id="btClose" type="Reject" text="Cancel" press="onCancelStep"/>
                        <Button visible="{= ${viewModel>/quickMode} === false }" id="btSaveHeader" type="Accept" text="Save Step" press="onSave"/>
                    </Toolbar>
                </headerToolbar>
                <f:SimpleForm layout="ResponsiveGridLayout" labelSpanXL="3" labelSpanL="3" labelSpanM="3" labelSpanS="12" adjustLabelSpan="false" emptySpanXL="4" emptySpanL="4" emptySpanM="4" emptySpanS="0" columnsXL="1" columnsL="1" columnsM="1" singleContainerFullSize="false">
                    <f:content>
                        <Label text="Type"/>
                        <HBox>
                            <Select enabled="{= !${viewModel>/blocked}}" width="100%" id="tstType" items="{constants>/stepTypes}" change="onTypeChange" selectedKey="{viewModel>/element/property/type}">
                                <items>
                                    <core:Item text="{constants>text}" key="{constants>key}"/>
                                </items>
                                <layoutData>
                                    <FlexItemData growFactor="1"/>
                                </layoutData>
                            </Select>
                            <Button icon="sap-icon://settings" enabled="{= !${viewModel>/blocked}}" press="onShowActionSettings"/>
                        </HBox>

                        <Label text="Action" visible="{= ( ${viewModel>/element/property/type} === 'ACT' ) }"/>
                        <HBox visible="{= ( ${viewModel>/element/property/type} === 'ACT' ) }">
                            <Select id="tstActType" enabled="{= !${viewModel>/blocked}}" items="{constants>/stepActions}" width="100%" change="onUpdateAction" selectedKey="{viewModel>/element/property/actKey}">
                                <items>
                                    <core:Item text="{constants>text}" key="{constants>key}"/>
                                </items>
                                <layoutData>
                                    <FlexItemData growFactor="1"/>
                                </layoutData>
                            </Select>
                            <Select id="tstSubActType" enabled="{= !${viewModel>/blocked}}" items="{viewModel>/element/subActionTypes}" change="onUpdatePreview" visible="{= ( ${viewModel>/element/property/type} === 'ACT' ) &amp;&amp; ( ${viewModel>/element/subActionTypes}.length >= 1 ) }" selectedKey="{viewModel>/element/property/domChildWith}">
                                <items>
                                    <core:Item text="{viewModel>text}" key="{viewModel>domChildWith}"/>
                                </items>
                            </Select>
                        </HBox>

                        <Label text="Assert-Type" visible="{= ( ${viewModel>/element/property/type} === 'ASS' ) }"/>
                        <Select id="tstAssType" enabled="{= !${viewModel>/blocked}}" change="onUpdatePreview" items="{constants>/assertTypes}" visible="{= ( ${viewModel>/element/property/type} === 'ASS' ) }" selectedKey="{viewModel>/element/property/assKey}">
                            <items>
                                <core:Item text="{constants>text}" key="{constants>key}"/>
                            </items>
                        </Select>
                        <Select enabled="{= !${viewModel>/blocked}}" change="onAGGChange" selectedKey="{viewModel>/element/property/selectedAggregation}" items="{viewModel>/element/item/aggregationNames}" visible="{= ( ${viewModel>/element/property/type} === 'ASS' ) &amp;&amp; ( ${viewModel>/element/property/assKey} === 'MTC' )}">
                            <items>
                                <core:Item text="{viewModel>name}" key="{viewModel>name}"/>
                            </items>
                        </Select>


                        <Label text="Assert-Message" visible="{= ( ${viewModel>/element/property/type} === 'ASS' ) }"/>
                        <Input enabled="{= !${viewModel>/blocked}}" change="onUpdatePreview" placeholder="Optional Message for the Assertion" value="{viewModel>/element/property/assertMessage}" visible="{= ( ${viewModel>/element/property/type} === 'ASS' ) }"/>

                        <Label text="Expect Element Count" visible="{= ( ${viewModel>/element/property/type} === 'ASS' ) &amp;&amp; ( ${viewModel>/element/property/assKey} === 'MTC' ) }"/>
                        <Select id="countExpect" enabled="{= !${viewModel>/blocked}}" items="{constants>/countType}" change="onCountExpChange" selectedKey="{viewModel>/element/property/expectCount}" visible="{= ( ${viewModel>/element/property/type} === 'ASS' ) &amp;&amp; ( ${viewModel>/element/property/assKey} === 'MTC' ) }">
                            <items>
                                <core:Item text="{constants>text}" key="{constants>key}"/>
                            </items>
                        </Select>
                        <Input enabled="{= !${viewModel>/blocked}}" change="onUpdatePreview" value="{ path: 'viewModel>/element/property/assKeyMatchingCount', type:'sap.ui.model.type.Integer'}" type="Number" visible="{= ( ${viewModel>/element/property/type} === 'ASS' ) &amp;&amp; ( ${viewModel>/element/property/assKey} === 'MTC' ) &amp;&amp; (${viewModel>/element/property/expectCount} === 'EXAC') }"/>

                        <Label text="Type-Text" visible="{= ( ${viewModel>/element/property/type} === 'ACT' ) &amp;&amp; ( ${viewModel>/element/property/actKey} === 'TYP' ) }"/>
                        <Input id="inpTypeText" enabled="{= !${viewModel>/blocked}}" valueLiveUpdate="true" liveChange="onUpdatePreview" change="onUpdatePreview" value="{viewModel>/element/property/selectActInsert}" visible="{= ( ${viewModel>/element/property/type} === 'ACT' ) &amp;&amp; ( ${viewModel>/element/property/actKey} === 'TYP' ) }"/>

                        <Label text="Select-By"/>
                        <Select id="tstSelectedBy" enabled="{= !${viewModel>/blocked}}" items="{constants>/selTypes}" change="onTypeChange" selectedKey="{viewModel>/element/property/selectItemBy}">
                            <items>
                                <core:Item text="{constants>text}" key="{constants>key}"/>
                            </items>
                        </Select>

                        <Label text="DOM-Id" visible="{= ( ${viewModel>/element/property/selectItemBy} === 'DOM' ) }"/>
                        <Input change="onUpdatePreview" enabled="{= !${viewModel>/blocked}}" editable="false" value="{viewModel>/element/item/identifier/domId}" valueState="{viewModel>/idQualityState}" valueStateText="{viewModel>/idQualityStateText}" visible="{= ( ${viewModel>/element/property/selectItemBy} === 'DOM' ) }"/>

                        <Label text="UI5-Id" visible="{= ( ${viewModel>/element/property/selectItemBy} === 'UI5' ) }"/>
                        <Input change="onUpdatePreview" enabled="{= !${viewModel>/blocked}}" value="{viewModel>/element/item/identifier/ui5Id}" valueState="{viewModel>/idQualityState}" valueStateText="{viewModel>/idQualityStateText}" visible="{= ( ${viewModel>/element/property/selectItemBy} === 'UI5' ) }"/>

                        <Label text="Rating"/>
                        <HBox>
                            <RatingIndicator id="RIValue" maxValue="5" enabled="false" class="sapUiSmallMarginBegin sapUiSmallMarginEnd" value="{viewModel>/element/ratingOfAttributes}" tooltip="Rating of selected Attributes"/>
                            <Button press="onExplain" type="Transparent" icon="sap-icon://message-popup" text="{= ${viewModel>/element/messages}.length }" tooltip="Explain Rating"/>
                        </HBox>

                        <Label text="Element-Name"/>
                        <HBox>
                            <Input id="inpTechName" enabled="{= !${viewModel>/blocked}}" editable="{viewModel>/element/property/useTechnicalName}" valueLiveUpdate="true" liveChange="onUpdatePreview" change="onUpdatePreview" value="{viewModel>/element/property/technicalName}">
                                <layoutData>
                                    <FlexItemData growFactor="1"/>
                                </layoutData>
                            </Input>
                            <Switch enabled="{= !${viewModel>/blocked}}" change="onUpdatePreview" state="{viewModel>/element/property/useTechnicalName}" tooltip="Use technical name over direct element access"/>
                        </HBox>
                    </f:content>
                </f:SimpleForm>
            </Panel>

            <Panel id="atrElementsPnl" expandable="true" visible="{= ( ${viewModel>/element/property/selectItemBy} === 'ATTR' ) }" expanded="false" width="auto">
                <headerToolbar>
                    <Toolbar active="true" press="onExpandControl" height="3em" style="Clear">
                        <content>
                            <ObjectStatus id="attrObjectStatus" text="Attributes ( {= ${viewModel>/element/attributeFilter}.length } )" state="{viewModel>/element/property/elementState}"/>
                            <ToolbarSpacer/>
                            <Button press="onFindAttribute" enabled="{= !${viewModel>/blocked}}" icon="sap-icon://add" tooltip="Add attribute" />
                            <Button press="onRemoveAttribute" icon="sap-icon://delete" tooltip="Remove"/>
                        </content>
                    </Toolbar>
                </headerToolbar>
                <content>
                    <Table fixedLayout="false" id="idAttributeTable" mode="SingleSelectLeft" inset="false" items="{viewModel>/element/attributeFilter}" visible="{= ( ${viewModel>/element/property/selectItemBy} === 'ATTR' ) }">
                        <columns>
                            <Column>
                                <Text text="Target"/>
                            </Column>
                            <Column minScreenWidth="Tablet" demandPopin="true">
                                <Text text="Criteria"/>
                            </Column>
                            <Column minScreenWidth="Tablet" demandPopin="true">
                                <Text text="Subcriteria"/>
                            </Column>
                            <Column minScreenWidth="Tablet" demandPopin="true">
                                <Text text="Value"/>
                            </Column>
                        </columns>
                        <items>
                            <ColumnListItem>
                                <cells>
                                    <Select items="{ path: 'viewModel>/dynamic/attrType', templateShareable: false }" change="onAttributeTypeChanged" selectedKey="{viewModel>attributeType}">
                                        <items>
                                            <core:Item text="{viewModel>text}" key="{viewModel>key}"/>
                                        </items>
                                    </Select>
                                    <Select change="onCriteriaTypeChanged" selectedKey="{ path: 'viewModel>criteriaType'}" items="{ path:'viewModel>criteriaTypes', sorter: { path: 'criteriaText' }, templateShareable: false }">
                                        <items>
                                            <core:Item text="{viewModel>criteriaText}" key="{viewModel>criteriaKey}" enabled="{parts: [{path: 'viewModel>criteriaKey'}, {path: 'viewModel>/element/item'}], formatter: '.checkCriteriaAppearance'}"/>
                                        </items>
                                    </Select>
                                    <Select id="subCriteriaSelect" change="onSubCriteriaTypeChanged" showSecondaryValues="true" width="13em" selectedKey="{ path: 'viewModel>subCriteriaType' }" items="{ path: 'viewModel>subCriteriaTypes', sorter: { path: 'subCriteriaText' }, templateShareable: false }">
                                        <items>
                                            <core:ListItem text="{viewModel>subCriteriaText}" key="{viewModel>subCriteriaType}" additionalText="{viewModel>calculatedValue}" tooltip="{viewModel>calculatedValueUnres}"/>
                                        </items>
                                    </Select>
                                    <VBox>
                                        <Input change="onChangeCriteriaValue" width="100%" value="{viewModel>criteriaValue}" />
                                        <HBox visible="{parts: [{path: 'viewModel>criteriaType'}, {path: 'viewModel>criteriaValue'}], formatter: '.showAttributeAdder'}" width="100%" class="attributeLine">
                                            <ObjectAttribute title="Value" text="{parts: [{path: 'viewModel>criteriaType'}, {path: 'viewModel>subCriteriaType'}, {path: 'viewModel>criteriaValue'}, {path: 'viewModel>/element/item'}], formatter: '.getBindingValue'}"/>
                                            <Button icon="sap-icon://add-filter" press="onAddAttributeValue" tooltip="Add attribute to fit the corresponding property value"/>
                                        </HBox>
                                    </VBox>
                                </cells>
                            </ColumnListItem>
                        </items>
                    </Table>
                </content>
            </Panel>

            <Panel visible="{= ( ${viewModel>/element/property/type} === 'SUP' ) }" id="pnlSupAssistantRule" expandable="true" expanded="false" width="auto">
                <headerToolbar>
                    <Toolbar active="true" press="onExpandControl" height="3em" style="Clear">
                        <content>
                            <ObjectStatus text="Support Assistant ( {= ${viewModel>/element/supportAssistantResult/issues}.length } )" state="{viewModel>/element/property/elementState}"/>
                            <ToolbarSpacer/>
                            <Button press="onRunSupportAssistant" icon="sap-icon://media-play" tooltip="Run Support Assistant on selected component" />
                        </content>
                    </Toolbar>
                </headerToolbar>
                <content>
                    <f:SimpleForm editable="{= !${viewModel>/blocked}}" layout="ResponsiveGridLayout" labelSpanXL="3" labelSpanL="3" labelSpanM="3" labelSpanS="12" adjustLabelSpan="false" emptySpanXL="4" emptySpanL="4" emptySpanM="4" emptySpanS="0" columnsXL="1" columnsL="1" columnsM="1" singleContainerFullSize="false">
                        <f:content>
                            <Label text="Ignore Global Context"/>
                            <CheckBox selected="{viewModel>/element/property/supportAssistant/ignoreGlobal}" select="onRunSupportAssistant"/>
                            <Label text="Exclude Rules"/>
                            <MultiComboBox selectedKeys="{viewModel>/element/property/supportAssistant/supportRules}" selectionFinish="onRunSupportAssistant" items="{ path: 'viewModel>/statics/supportRules',
                                         sorter: { path: 'libName' }}">
                                <core:Item key="{viewModel>libName}/{viewModel>ruleId}" text="{viewModel>libName} - {viewModel>ruleId}"/>
                            </MultiComboBox>
                        </f:content>
                    </f:SimpleForm>

                    <Table id="idSupportAssistantTable" inset="false" items="{viewModel>/element/supportAssistantResult/issues}">
                        <columns>
                            <Column width="4em">
                                <Text text="Severity"/>
                            </Column>
                            <Column minScreenWidth="Tablet" demandPopin="true">
                                <Text text="Details"/>
                            </Column>
                            <Column minScreenWidth="Tablet" width="10em" demandPopin="true">
                                <Text text="Rule"/>
                            </Column>
                        </columns>
                        <items>
                            <ColumnListItem>
                                <cells>
                                    <ObjectStatus text="{viewModel>severity}" state="{viewModel>state}"/>
                                    <Text width="100%" text="{viewModel>details}"/>
                                    <Text text="{viewModel>rule}" tooltip="{viewModel>ruleText}"/>
                                </cells>
                            </ColumnListItem>
                        </items>
                    </Table>
                </content>
            </Panel>

            <Panel visible="{= ( ${viewModel>/element/property/type} === 'ASS' ) &amp;&amp; ( ${viewModel>/element/property/assKey} === 'ATTR' ) }" expandable="true" expanded="true" width="auto">
                <headerToolbar>
                    <Toolbar active="true" press="onExpandControl" height="3em" style="Clear">
                        <content>
                            <ObjectStatus text="Assertions" state="{viewModel>/element/property/elementState}"/>
                            <ToolbarSpacer/>
                            <Button press="onAddAssertion" icon="sap-icon://add" tooltip="Add"/>
                            <Button press="onRemoveAssertion" icon="sap-icon://delete" tooltip="Remove"/>
                        </content>
                    </Toolbar>
                </headerToolbar>

                <content>
                    <Table fixedLayout="false" id="idAssertionTable" mode="SingleSelectLeft" inset="false" items="{viewModel>/element/assertFilter}" visible="{= ( ${viewModel>/element/property/type} === 'ASS' ) &amp;&amp; ( ${viewModel>/element/property/assKey} === 'ATTR' ) }">
                        <columns>
                            <Column>
                                <Text text="Target"/>
                            </Column>
                            <Column minScreenWidth="Tablet" demandPopin="true">
                                <Text text="Criteria"/>
                            </Column>
                            <Column minScreenWidth="Tablet" demandPopin="true">
                                <Text text="Subcriteria"/>
                            </Column>
                            <Column minScreenWidth="Tablet" demandPopin="true">
                                <Text text="Operator"/>
                            </Column>
                            <Column minScreenWidth="Tablet" demandPopin="true" hAlign="End">
                                <Text text="Value"/>
                            </Column>
                        </columns>
                        <items>
                            <ColumnListItem>
                                <cells>
                                    <Select change="onAttributeTypeChanged" items="{viewModel>/dynamic/attrType}" selectedKey="{viewModel>attributeType}">
                                        <items>
                                            <core:Item text="{viewModel>text}" key="{viewModel>key}"/>
                                        </items>
                                    </Select>
                                    <Select change="onCriteriaTypeChanged" selectedKey="{viewModel>criteriaType}" items="{ path: 'viewModel>criteriaTypes' , sorter: { path: 'criteriaText' }}">
                                        <items>
                                            <core:Item text="{viewModel>criteriaText}" key="{viewModel>criteriaKey}"/>
                                        </items>
                                    </Select>
                                    <Select change="onSubCriteriaTypeChanged" selectedKey="{viewModel>subCriteriaType}" items="{ path: 'viewModel>subCriteriaTypes', sorter: { path: 'subCriteriaText' } }">
                                        <items>
                                            <core:Item text="{viewModel>subCriteriaText}" key="{viewModel>subCriteriaType}"/>
                                        </items>
                                    </Select>
                                    <Select change="onUpdatePreview" items="{constants>/operator}" selectedKey="{viewModel>operatorType}">
                                        <items>
                                            <core:Item text="{constants>text}" key="{constants>key}"/>
                                        </items>
                                    </Select>
                                    <Input change="onChangeCriteriaValue" width="100%" value="{viewModel>criteriaValue}"/>
                                </cells>
                            </ColumnListItem>
                        </items>
                    </Table>
                </content>
            </Panel>

            <Panel expandable="true" id="pnlFoundElements" expanded="false" width="auto">
                <headerToolbar>
                    <Toolbar active="true" press="onExpandControl" height="3rem" style="Clear">
                        <ObjectStatus text="Found Items ( {=${viewModel>/element/identifiedElements}.length} )" state="{viewModel>/element/property/elementState}"/>
                    </Toolbar>
                </headerToolbar>
                <content>
                    <List id="tblIdentifiedElements" items="{viewModel>/element/identifiedElements}" noDataText="{i18n>notFoundTitle}" growing="true">
                        <items>
                            <StandardListItem title="{viewModel>id}" description="{viewModel>className}"/>
                        </items>
                    </List>
                </content>
            </Panel>

            <Panel expandable="true" expanded="true" width="auto">
                <headerToolbar>
                    <Toolbar active="true" press="onExpandControl" height="3rem" style="Clear">
                        <Title titleStyle="H5" text="Code-Preview"/>
                        <ToolbarSpacer/>
                        <Select id="tstLanguage" change="onUpdatePreview" items="{settings>/codeLanguages}" selectedKey="{settings>/settings/defaultLanguage}">
                            <items>
                                <core:Item text="{settings>text}" key="{settings>key}"/>
                            </items>
                        </Select>
                        <Select id="natLanguage" change="onUpdatePreview" items="{settings>/naturalLanguages}" visible="{= ${settings>/settings/defaultLanguage} === 'NAT'}" selectedKey="{settings>/settings/defaultNatLanguage}">
                            <items>
                                <core:Item text="{settings>text}" key="{settings>key}"/>
                            </items>
                        </Select>
                    </Toolbar>
                </headerToolbar>
                <content>
                    <code:CodeEditor value="{viewModel>/code}" height="100px" editable="true" type="typescript">
                        <code:layoutData>
                            <FlexItemData growFactor="1"/>
                        </code:layoutData>
                    </code:CodeEditor>
                </content>
            </Panel>
        </semantic:content>
    </semantic:FullscreenPage>
</mvc:View>
