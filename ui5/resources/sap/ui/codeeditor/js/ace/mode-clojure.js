ace.define("ace/mode/clojure_highlight_rules",["require","exports","module","ace/lib/oop","ace/mode/text_highlight_rules"],function(r,e,m){"use strict";var o=r("../lib/oop");var T=r("./text_highlight_rules").TextHighlightRules;var C=function(){var b=('* *1 *2 *3 *agent* *allow-unresolved-vars* *assert* *clojure-version* '+'*command-line-args* *compile-files* *compile-path* *e *err* *file* '+'*flush-on-newline* *in* *macro-meta* *math-context* *ns* *out* '+'*print-dup* *print-length* *print-level* *print-meta* *print-readably* '+'*read-eval* *source-path* *use-context-classloader* '+'*warn-on-reflection* + - -> ->> .. / < <= = '+'== > &gt; >= &gt;= accessor aclone '+'add-classpath add-watch agent agent-errors aget alength alias all-ns '+'alter alter-meta! alter-var-root amap ancestors and apply areduce '+'array-map aset aset-boolean aset-byte aset-char aset-double aset-float '+'aset-int aset-long aset-short assert assoc assoc! assoc-in associative? '+'atom await await-for await1 bases bean bigdec bigint binding bit-and '+'bit-and-not bit-clear bit-flip bit-not bit-or bit-set bit-shift-left '+'bit-shift-right bit-test bit-xor boolean boolean-array booleans '+'bound-fn bound-fn* butlast byte byte-array bytes cast char char-array '+'char-escape-string char-name-string char? chars chunk chunk-append '+'chunk-buffer chunk-cons chunk-first chunk-next chunk-rest chunked-seq? '+'class class? clear-agent-errors clojure-version coll? comment commute '+'comp comparator compare compare-and-set! compile complement concat cond '+'condp conj conj! cons constantly construct-proxy contains? count '+'counted? create-ns create-struct cycle dec decimal? declare definline '+'defmacro defmethod defmulti defn defn- defonce defstruct delay delay? '+'deliver deref derive descendants destructure disj disj! dissoc dissoc! '+'distinct distinct? doall doc dorun doseq dosync dotimes doto double '+'double-array doubles drop drop-last drop-while empty empty? ensure '+'enumeration-seq eval even? every? false? ffirst file-seq filter find '+'find-doc find-ns find-var first float float-array float? floats flush '+'fn fn? fnext for force format future future-call future-cancel '+'future-cancelled? future-done? future? gen-class gen-interface gensym '+'get get-in get-method get-proxy-class get-thread-bindings get-validator '+'hash hash-map hash-set identical? identity if-let if-not ifn? import '+'in-ns inc init-proxy instance? int int-array integer? interleave intern '+'interpose into into-array ints io! isa? iterate iterator-seq juxt key '+'keys keyword keyword? last lazy-cat lazy-seq let letfn line-seq list '+'list* list? load load-file load-reader load-string loaded-libs locking '+'long long-array longs loop macroexpand macroexpand-1 make-array '+'make-hierarchy map map? mapcat max max-key memfn memoize merge '+'merge-with meta method-sig methods min min-key mod name namespace neg? '+'newline next nfirst nil? nnext not not-any? not-empty not-every? not= '+'ns ns-aliases ns-imports ns-interns ns-map ns-name ns-publics '+'ns-refers ns-resolve ns-unalias ns-unmap nth nthnext num number? odd? '+'or parents partial partition pcalls peek persistent! pmap pop pop! '+'pop-thread-bindings pos? pr pr-str prefer-method prefers '+'primitives-classnames print print-ctor print-doc print-dup print-method '+'print-namespace-doc print-simple print-special-doc print-str printf '+'println println-str prn prn-str promise proxy proxy-call-with-super '+'proxy-mappings proxy-name proxy-super push-thread-bindings pvalues quot '+'rand rand-int range ratio? rational? rationalize re-find re-groups '+'re-matcher re-matches re-pattern re-seq read read-line read-string '+'reduce ref ref-history-count ref-max-history ref-min-history ref-set '+'refer refer-clojure release-pending-sends rem remove remove-method '+'remove-ns remove-watch repeat repeatedly replace replicate require '+'reset! reset-meta! resolve rest resultset-seq reverse reversible? rseq '+'rsubseq second select-keys send send-off seq seq? seque sequence '+'sequential? set set-validator! set? short short-array shorts '+'shutdown-agents slurp some sort sort-by sorted-map sorted-map-by '+'sorted-set sorted-set-by sorted? special-form-anchor special-symbol? '+'split-at split-with str stream? string? struct struct-map subs subseq '+'subvec supers swap! symbol symbol? sync syntax-symbol-anchor take '+'take-last take-nth take-while test the-ns time to-array to-array-2d '+'trampoline transient tree-seq true? type unchecked-add unchecked-dec '+'unchecked-divide unchecked-inc unchecked-multiply unchecked-negate '+'unchecked-remainder unchecked-subtract underive unquote '+'unquote-splicing update-in update-proxy use val vals var-get var-set '+'var? vary-meta vec vector vector? when when-first when-let when-not '+'while with-bindings with-bindings* with-in-str with-loading-context '+'with-local-vars with-meta with-open with-out-str with-precision xml-seq '+'zero? zipmap');var k=('throw try var '+'def do fn if let loop monitor-enter monitor-exit new quote recur set!');var a=("true false nil");var c=this.createKeywordMapper({"keyword":k,"constant.language":a,"support.function":b},"identifier",false," ");this.$rules={"start":[{token:"comment",regex:";.*$"},{token:"keyword",regex:"[\\(|\\)]"},{token:"keyword",regex:"[\\'\\(]"},{token:"keyword",regex:"[\\[|\\]]"},{token:"keyword",regex:"[\\{|\\}|\\#\\{|\\#\\}]"},{token:"keyword",regex:'[\\&]'},{token:"keyword",regex:'[\\#\\^\\{]'},{token:"keyword",regex:'[\\%]'},{token:"keyword",regex:'[@]'},{token:"constant.numeric",regex:"0[xX][0-9a-fA-F]+\\b"},{token:"constant.numeric",regex:"[+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?\\b"},{token:"constant.language",regex:'[!|\\$|%|&|\\*|\\-\\-|\\-|\\+\\+|\\+||=|!=|<=|>=|<>|<|>|!|&&]'},{token:c,regex:"[a-zA-Z_$][a-zA-Z0-9_$\\-]*\\b"},{token:"string",regex:'"',next:"string"},{token:"constant",regex:/:[^()\[\]{}'"\^%`,;\s]+/},{token:"string.regexp",regex:'/#"(?:\\.|(?:\\")|[^""\n])*"/g'}],"string":[{token:"constant.language.escape",regex:"\\\\.|\\\\$"},{token:"string",regex:'[^"\\\\]+'},{token:"string",regex:'"',next:"start"}]};};o.inherits(C,T);e.ClojureHighlightRules=C;});ace.define("ace/mode/matching_parens_outdent",["require","exports","module","ace/range"],function(r,e,m){"use strict";var R=r("../range").Range;var M=function(){};(function(){this.checkOutdent=function(l,i){if(!/^\s+$/.test(l))return false;return/^\s*\)/.test(i);};this.autoOutdent=function(d,a){var l=d.getLine(a);var b=l.match(/^(\s*\))/);if(!b)return 0;var c=b[1].length;var o=d.findMatchingBracket({row:a,column:c});if(!o||o.row==a)return 0;var i=this.$getIndent(d.getLine(o.row));d.replace(new R(a,0,a,c-1),i);};this.$getIndent=function(l){var a=l.match(/^(\s+)/);if(a){return a[1];}return"";};}).call(M.prototype);e.MatchingParensOutdent=M;});ace.define("ace/mode/clojure",["require","exports","module","ace/lib/oop","ace/mode/text","ace/mode/clojure_highlight_rules","ace/mode/matching_parens_outdent"],function(r,e,m){"use strict";var o=r("../lib/oop");var T=r("./text").Mode;var C=r("./clojure_highlight_rules").ClojureHighlightRules;var M=r("./matching_parens_outdent").MatchingParensOutdent;var a=function(){this.HighlightRules=C;this.$outdent=new M();this.$behaviour=this.$defaultBehaviour;};o.inherits(a,T);(function(){this.lineCommentStart=";";this.minorIndentFunctions=["defn","defn-","defmacro","def","deftest","testing"];this.$toIndent=function(s){return s.split('').map(function(c){if(/\s/.exec(c)){return c;}else{return' ';}}).join('');};this.$calculateIndent=function(l,t){var b=this.$getIndent(l);var d=0;var c,f;for(var i=l.length-1;i>=0;i--){f=l[i];if(f==='('){d--;c=true;}else if(f==='('||f==='['||f==='{'){d--;c=false;}else if(f===')'||f===']'||f==='}'){d++;}if(d<0){break;}}if(d<0&&c){i+=1;var B=i;var g='';while(true){f=l[i];if(f===' '||f==='\t'){if(this.minorIndentFunctions.indexOf(g)!==-1){return this.$toIndent(l.substring(0,B-1)+t);}else{return this.$toIndent(l.substring(0,i+1));}}else if(f===undefined){return this.$toIndent(l.substring(0,B-1)+t);}g+=l[i];i++;}}else if(d<0&&!c){return this.$toIndent(l.substring(0,i+1));}else if(d>0){b=b.substring(0,b.length-t.length);return b;}else{return b;}};this.getNextLineIndent=function(s,l,t){return this.$calculateIndent(l,t);};this.checkOutdent=function(s,l,i){return this.$outdent.checkOutdent(l,i);};this.autoOutdent=function(s,d,b){this.$outdent.autoOutdent(d,b);};this.$id="ace/mode/clojure";}).call(a.prototype);e.Mode=a;});
